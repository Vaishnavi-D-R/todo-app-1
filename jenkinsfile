pipeline{
    agent any
     tools{
       maven 'maven'
       jdk 'jdk15'
   }
    stages{
        stage("build"){
        
            steps{
           
                sh 'mvn clean'
                sh 'mvn -f app/pom.xml compile'
            }
          
        }
    
     stage("Test"){
            steps{
               
                echo "Maven Test"
                sh 'mvn -f app/pom.xml -Dmaven.test.failure.ignore=true  test'
                
            }
          
        }
       
       stage('sonar analysis'){
            agent any
            steps{
           
                withSonarQubeEnv('sonarQube'){
                    echo 'Performing SonarQube Analysis'
                    sh 'mvn -f app/pom.xml package sonar:sonar'
                }
            }
          
            
        }
        
        
    stage('deploy to artifactory'){
            steps{
          
                rtUpload (
            serverId: 'ARTIFACTORY_SERVER',
            spec: '''{
                 "files": [
                             {
                                "pattern": "target/*.jar",
                                "target": "art-doc-dev-loc/todo-app/"
                            }
                        ]
            }''',
            )
            }
        }
        
        stage('download artifact'){
            steps{
           
                 rtDownload (
                 serverId: "ARTIFACTORY_SERVER",
                spec:"""{
                     "files": [
                                {
                                    "pattern": "art-doc-dev-loc/todo-app/**",
                                    "target": "app/"      
                                }
                            ]
              }"""
            )
            
            }
        }
stage('Docker build'){
            steps{
                sh 'docker image prune -a --force'
                    sh 'docker-compose build'
                
               
            }
        }
        stage('Pushing images to docker hub'){
            steps{
                sh "docker login -u vaishu2000 -p vaishu2000"
                sh "docker tag CI-pipeline_app:latest vaishu2000/todo-app:v${env.BUILD_ID}"
                sh "docker push vaishu2000/todo-app:v${env.BUILD_ID}"

            }
        }
      

    }
    /*post{
        always {  
             echo 'This will always run always'  
         }  
         success {   
            echo "========Deploying executed successfully========"
            emailext attachLog: true, body: "<b>Example</b><br>Project: ${env.JOB_NAME}", from: 'vaishnavidr123@gmail.com', mimeType: 'text/html', replyTo: '', subject: "Deploy Success CI: Project name -> ${env.JOB_NAME}", to: "vaishnavidr123@gmail.com";
         }  
         failure {  
         echo " *build failed* "
              mail bcc: '', body: "<b>Example</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br>Stage Name: $last_staged <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: 'vaishnavidr123@gmail.com', mimeType: 'text/html', replyTo: '', subject: "ERROR CI: Project name -> ${env.JOB_NAME}", to: "vaishnavidr123@gmail.com";   
         }  
         unstable {  
             echo 'This will run only if the run was marked as unstable'  
         }  
         changed {  
             echo 'This will run only if the state of the Pipeline has changed'  
             echo 'For example, if the Pipeline was previously failing but is now successful'  
         }  
    }*/
   
}
